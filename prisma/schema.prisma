// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  reviews       Review[]
  followedShops Shop[]   @relation("FollowedShops")
  Vendor        Vendor[]
}

model Vendor {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id          String     @id @default(cuid())
  name        String
  logoUrl     String?
  description String?
  vendorId    String     @unique
  vendor      Vendor     @relation(fields: [vendorId], references: [id])
  products    Product[]
  orders      Order[]
  followers   User[]     @relation("FollowedShops")
  status      ShopStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  price       Float
  thumbnail   String
  description String
  categoryId  String
  brandId     String
  category    Category    @relation(fields: [categoryId], references: [id])
  brand       Brand       @relation(fields: [brandId], references: [id])
  inventory   Int
  discount    Float       @default(0.0)
  images      Image[]
  shopId      String?
  shop        Shop?        @relation(fields: [shopId], references: [id])
  reviews     Review[]
  OrderItem   OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  image     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  shopId      String
  shop        Shop        @relation(fields: [shopId], references: [id])
  products    OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  VENDOR
  USER
}

enum OrderStatus {
  PENDING
  SHIPPED
  COMPLETED
  CANCELED
}

enum ShopStatus {
  ACTIVE
  BLOCKED
}
